{
  "name": "SortedListAdapter",
  "tagline": "The RecyclerView.Adapter that makes your life easy!",
  "body": " - **Based on the SortedList**: Uses a `Comparator` to sort the elements in your `RecyclerView`. By using a `Comparator` the `SortedList` takes care of managing the models in the `Adapter` in an efficient way and triggers all view animations for you!\r\n - **Reduces boilerplate**: All you have to do is implement your `ViewHolder` based on `SortedListAdapter.ViewHolder`. The `SortedListAdapter` takes care of binding data and calls to the notify methods when you add or remove models to the `SortedListAdapter`.\r\n\r\n[![Build Status](https://travis-ci.org/Wrdlbrnft/SortedListAdapter.svg?branch=master)](https://travis-ci.org/Wrdlbrnft/SortedListAdapter)\r\n\r\n# How do I add it to my project?\r\n\r\nJust add this dependency to your build.gradle file:\r\n\r\n```\r\ncompile 'com.github.wrdlbrnft:sorted-list-adapter:0.2.0.1'\r\n```\r\n\r\n## Example Project\r\n\r\nYou can find a simple example project in this [**GitHub Repository**](https://github.com/Wrdlbrnft/Searchable-RecyclerView-Demo).\r\n\r\n# Using the Adapter\r\n\r\nOnce you have implemented the `Adapter` you can add and remove models to it with an `Editor` object which can be accessed through the `edit()` method. All changes you make with this `Editor` object are batched and executed together once you call `commit()` on the `Editor` instance:\r\n\r\n```java\r\nfinal Comparator<ExampleModel> alphabeticalComparator = new Comparator<ExampleModel>() {\r\n    @Override\r\n    public int compare(ExampleModel a, ExampleModel b) {\r\n        return a.getText().compareTo(b.getText());\r\n    }\r\n};\r\n\r\nfinal ExampleAdapter adapter = new ExampleAdapter(context, alphabeticalComparator);\r\nrecyclerView.setAdapter(adapter);\r\n\r\nadapter.edit()\r\n        .add(modelsToAdd)\r\n        .commit();\r\n```\r\n\r\nAs you can see above you can add models to the `Adapter` with `add()`. The same way you can remove models with `remove()`:\r\n\r\n```\r\nadapter.edit()\r\n        .remove(modelsToRemove)\r\n        .commit();\r\n```\r\n\r\nYou can also completely replace all models in the `Adapter` with another `List` of models with the `replaceAll()` method:\r\n\r\n```java\r\nadapter.edit()\r\n        .replaceAll(newModels)\r\n        .commit();\r\n```\r\n\r\nOr you can remove all models with `removeAll()`:\r\n\r\n```java\r\nadapter.edit()\r\n        .removeAll()\r\n        .commit();\r\n```\r\n\r\n**All** changes you make this way will automatically be animated in the RecyclerView!\r\n\r\n### Best practices\r\n\r\nUsually all you need is the `replaceAll()` method. If you have a `List` of models that you want to show you can add them to the `Adapter` and if you later get an updated `List` of models through some network call you can just use `replaceAll()` to swap them out. The `SortedListAdapter` will automatically figure out the difference between the two `Lists` and animate the difference!\r\n\r\n# Implementation with Data Binding\r\n\r\n## Models\r\n\r\nAll models you want to use in a `SortedListAdapter` have to implement `SortedListAdapter.ViewModel` like this:\r\n\r\n```java\r\npublic class ExampleModel implements SortedListAdapter.ViewModel {\r\n\r\n    private final long mId;\r\n    private final String mText;\r\n\r\n    public ExampleModel(long id, String text) {\r\n        mId = id;\r\n        mText = text;\r\n    }\r\n\r\n    public long getId() {\r\n        return mId;\r\n    }\r\n\r\n    public String getText() {\r\n        return mText;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n\r\n        ExampleModel model = (ExampleModel) o;\r\n\r\n        if (mId != model.mId) return false;\r\n        return mText != null ? mText.equals(model.mText) : model.mText == null;\r\n\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result = (int) (mId ^ (mId >>> 32));\r\n        result = 31 * result + (mText != null ? mText.hashCode() : 0);\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\nIt is also advisable that all models override `equals()` and `hashCode()`. Most IDE's can generate `equals()` and `hashCode()` implementations for you.\r\n\r\n## ViewHolders\r\n\r\nWhen you implement a `ViewHolder` use the base class `SortedListAdapter.ViewHolder`, the type parameter of `SortedListAdapter.ViewHolder` should be the model which you want to bind to that `ViewHolder`:\r\n\r\n```java\r\npublic class ExampleViewHolder extends SortedListAdapter.ViewHolder<ExampleModel> {\r\n\r\n    private final ItemExampleBinding mBinding;\r\n\r\n    public ExampleViewHolder(ItemExampleBinding binding) {\r\n        super(binding.getRoot());\r\n        mBinding = binding;\r\n    }\r\n\r\n    @Override\r\n    protected void performBind(ExampleModel item) {\r\n        mBinding.setModel(item);\r\n    }\r\n}\r\n```\r\n\r\nBind data in the `performBind()` method.\r\n\r\n## The Adapter\r\n\r\n```java\r\npublic class ExampleAdapter extends SortedListAdapter<ExampleModel> {\r\n\r\n    public ExampleAdapter(Context context, Comparator<ExampleModel> comparator) {\r\n        super(context, ExampleModel.class, comparator);\r\n    }\r\n\r\n    @Override\r\n    protected ViewHolder<? extends ExampleModel> onCreateViewHolder(LayoutInflater inflater, ViewGroup parent, int viewType) {\r\n        final ItemExampleBinding binding = ItemExampleBinding.inflate(inflater, parent, false);\r\n        return new ExampleViewHolder(binding);\r\n    }\r\n\r\n    @Override\r\n    protected boolean areItemsTheSame(ExampleModel item1, ExampleModel item2) {\r\n        return item1.getId() == item2.getId();\r\n    }\r\n\r\n    @Override\r\n    protected boolean areItemContentsTheSame(ExampleModel oldItem, ExampleModel newItem) {\r\n        return oldItem.equals(newItem);\r\n    }\r\n}\r\n```\r\n\r\nIn `onCreateViewHolder()` just create instances of your `ViewHolder` implementations like usual. TWo extra methods have to be implemented for the `SortedListAdapter`: `areItemsTheSame()` and `areItemContentsTheSame()`.\r\n\r\n - **`areItemsTheSame()`**: Should check if two models refer to the same thing. This method should in most cases just compare the id of a model. In simplest terms the `SortedListAdapter` uses this method to determine if a model is already contained in the `SortedListAdater` or if a new model has been added.\r\n - **`areItemContentsTheSame()`**: Should check if the content of two models is the same. If your models have implemented `equals()` correctly you can just use `equals()` here to compare them. The `SortedListAdapter` uses this to determine if a model has changed and if a change animation should be triggered in the `RecyclverView`.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}